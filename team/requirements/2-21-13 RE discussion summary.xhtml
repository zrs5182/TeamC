<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="Ben Luo" http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
<style>p{text-indent:30px;}</style>
<title>Team C RE Discussion Summary</title>
</head>
<body>

<h1>Requirements Engineering Discussion Summary</h1>
<b>Team C <br></br>Drafted by Ben Luo</b>

<table border="0" cellpadding="0" cellspacing="0" width="750">
<tr>
<h3>Summary: Sommerville RE Article</h3>

<p><b>Requirements engineering</b> (RE) is a process in software engineering that determines and documents 
the design specifications of a software system. The author discusses the origins of RE, citing various example 
situations where it is beneficial. RE is particularly well-suited to the rapidly changing needs in software 
development presented by recent advances in technology. The major activities in the RE process are:
	<ul>
	<li><em>Elicitation</em>- Discover requirements from appropriate sources</li>
	<li><em>Analysis</em>- Understand requirements</li>
	<li><em>Negotiation</em>- Reconcile conflicting views to make a consistent set of requirements</li>
	<li><em>Documentation</em>- Write down requirements as reference for stakeholders and developers</li>
	<li><em>Management</em>- Control changes in requirements that arise over course of development</li>
	</ul>

</p>

<p><b>Concurrent RE</b> is the approach employed by the XP agile method. Emphasis on a constant 
feedback cycle throughout development produces three main benefits:
	<ul>
	<li>Less overhead for analysis/documentation of requirements</li>
	<li>Value-delivering requirements (the "critical properties" of the system) are identified and
	implemented early</li>
	<li>Responsiveness to change in requirements</li>
	</ul>
The article cautions against complications caused by customers' lack of technical knowledge, suggesting 
the listing of complicators and simplifiers as a means of determining the feasibility of a proposed requirement. 
</p>

<p>Readily available <b>Commercial off-the-shelf</b> (COTS) software is presented as a potentially labor-saving 
option, though procurement and adaptation of COTS software presents its own concerns. Finally, guidelines for 
interoperability requirements specification are discussed.
</p>

<h3>Conclusions</h3>

<p>We must become accustomed to using simple, clear, non-technical English when dealing with the client. 
This applies to both our questions document and the requirements list we will eventually generate. Many 
of the questions we have already devised will require some careful rewording.
As discussed in class, we should assume a baseline of proficiency with standard productivity software, 
but no programming knowledge.
</p>

<p>The complicator/simplifier-based analysis of requirements is a very appealing approach to 
evaluating proposed requirements. We will structure group requirements discussion around this principle.
</p>

<p>Due to the similarities between the premise for this project and the Rationale software shown in class,
we are inclined to focus part of our questions on exploring the option of using readily available COTS 
or free software. Depending on the complexity and specificity of the client's requirements, repurposed available 
software may very well be enough to satisfy the client's needs.
</p>

</tr>
</table>
</body>

</html>